/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetTokenAddress"
      | "cancelListing"
      | "confirmDelivery"
      | "fundEscrow"
      | "listAsset"
      | "listings"
      | "pendingBalance"
      | "pendingWithdrawals"
      | "refundBuyer"
      | "withdrawPayments"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AssetListed"
      | "EscrowFunded"
      | "ListingCanceled"
      | "PaymentReady"
      | "SaleCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelListing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listAsset",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundBuyer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawPayments",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "assetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundEscrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundBuyer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawPayments",
    data: BytesLike
  ): Result;
}

export namespace AssetListedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, seller: string, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EscrowFundedEvent {
  export type InputTuple = [tokenId: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [tokenId: bigint, buyer: string];
  export interface OutputObject {
    tokenId: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ListingCanceledEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReadyEvent {
  export type InputTuple = [seller: AddressLike, amountWeibars: BigNumberish];
  export type OutputTuple = [seller: string, amountWeibars: bigint];
  export interface OutputObject {
    seller: string;
    amountWeibars: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SaleCompletedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, seller: string, buyer: string];
  export interface OutputObject {
    tokenId: bigint;
    seller: string;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetTokenAddress: TypedContractMethod<[], [string], "view">;

  cancelListing: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  confirmDelivery: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundEscrow: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  listAsset: TypedContractMethod<
    [tokenId: BigNumberish, priceInTinybars: BigNumberish],
    [void],
    "nonpayable"
  >;

  listings: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        seller: string;
        buyer: string;
        price: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  pendingBalance: TypedContractMethod<[who: AddressLike], [bigint], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  refundBuyer: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawPayments: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelListing"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmDelivery"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fundEscrow"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "listAsset"
  ): TypedContractMethod<
    [tokenId: BigNumberish, priceInTinybars: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "listings"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        seller: string;
        buyer: string;
        price: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingBalance"
  ): TypedContractMethod<[who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "refundBuyer"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawPayments"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AssetListed"
  ): TypedContractEvent<
    AssetListedEvent.InputTuple,
    AssetListedEvent.OutputTuple,
    AssetListedEvent.OutputObject
  >;
  getEvent(
    key: "EscrowFunded"
  ): TypedContractEvent<
    EscrowFundedEvent.InputTuple,
    EscrowFundedEvent.OutputTuple,
    EscrowFundedEvent.OutputObject
  >;
  getEvent(
    key: "ListingCanceled"
  ): TypedContractEvent<
    ListingCanceledEvent.InputTuple,
    ListingCanceledEvent.OutputTuple,
    ListingCanceledEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReady"
  ): TypedContractEvent<
    PaymentReadyEvent.InputTuple,
    PaymentReadyEvent.OutputTuple,
    PaymentReadyEvent.OutputObject
  >;
  getEvent(
    key: "SaleCompleted"
  ): TypedContractEvent<
    SaleCompletedEvent.InputTuple,
    SaleCompletedEvent.OutputTuple,
    SaleCompletedEvent.OutputObject
  >;

  filters: {
    "AssetListed(uint256,address,uint256)": TypedContractEvent<
      AssetListedEvent.InputTuple,
      AssetListedEvent.OutputTuple,
      AssetListedEvent.OutputObject
    >;
    AssetListed: TypedContractEvent<
      AssetListedEvent.InputTuple,
      AssetListedEvent.OutputTuple,
      AssetListedEvent.OutputObject
    >;

    "EscrowFunded(uint256,address)": TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;
    EscrowFunded: TypedContractEvent<
      EscrowFundedEvent.InputTuple,
      EscrowFundedEvent.OutputTuple,
      EscrowFundedEvent.OutputObject
    >;

    "ListingCanceled(uint256)": TypedContractEvent<
      ListingCanceledEvent.InputTuple,
      ListingCanceledEvent.OutputTuple,
      ListingCanceledEvent.OutputObject
    >;
    ListingCanceled: TypedContractEvent<
      ListingCanceledEvent.InputTuple,
      ListingCanceledEvent.OutputTuple,
      ListingCanceledEvent.OutputObject
    >;

    "PaymentReady(address,uint256)": TypedContractEvent<
      PaymentReadyEvent.InputTuple,
      PaymentReadyEvent.OutputTuple,
      PaymentReadyEvent.OutputObject
    >;
    PaymentReady: TypedContractEvent<
      PaymentReadyEvent.InputTuple,
      PaymentReadyEvent.OutputTuple,
      PaymentReadyEvent.OutputObject
    >;

    "SaleCompleted(uint256,address,address)": TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;
    SaleCompleted: TypedContractEvent<
      SaleCompletedEvent.InputTuple,
      SaleCompletedEvent.OutputTuple,
      SaleCompletedEvent.OutputObject
    >;
  };
}
