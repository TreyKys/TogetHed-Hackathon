/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelGig"
      | "confirmDelivery"
      | "createGig"
      | "fundGig"
      | "gigs"
      | "nextGigId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Canceled" | "Confirmed" | "Funded" | "GigCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelGig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDelivery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGig",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundGig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gigs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "nextGigId", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cancelGig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundGig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gigs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextGigId", data: BytesLike): Result;
}

export namespace CanceledEvent {
  export type InputTuple = [gigId: BigNumberish, canceledBy: AddressLike];
  export type OutputTuple = [gigId: bigint, canceledBy: string];
  export interface OutputObject {
    gigId: bigint;
    canceledBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfirmedEvent {
  export type InputTuple = [gigId: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [gigId: bigint, buyer: string];
  export interface OutputObject {
    gigId: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundedEvent {
  export type InputTuple = [gigId: BigNumberish, buyer: AddressLike];
  export type OutputTuple = [gigId: bigint, buyer: string];
  export interface OutputObject {
    gigId: bigint;
    buyer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GigCreatedEvent {
  export type InputTuple = [
    gigId: BigNumberish,
    seller: AddressLike,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    gigId: bigint,
    seller: string,
    buyer: string,
    price: bigint
  ];
  export interface OutputObject {
    gigId: bigint;
    seller: string;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): Escrow;
  waitForDeployment(): Promise<this>;

  interface: EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelGig: TypedContractMethod<[_gigId: BigNumberish], [void], "nonpayable">;

  confirmDelivery: TypedContractMethod<
    [_gigId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createGig: TypedContractMethod<
    [_seller: AddressLike, _price: BigNumberish],
    [void],
    "nonpayable"
  >;

  fundGig: TypedContractMethod<[_gigId: BigNumberish], [void], "payable">;

  gigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        seller: string;
        buyer: string;
        price: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  nextGigId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelGig"
  ): TypedContractMethod<[_gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmDelivery"
  ): TypedContractMethod<[_gigId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createGig"
  ): TypedContractMethod<
    [_seller: AddressLike, _price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundGig"
  ): TypedContractMethod<[_gigId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "gigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        seller: string;
        buyer: string;
        price: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextGigId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Canceled"
  ): TypedContractEvent<
    CanceledEvent.InputTuple,
    CanceledEvent.OutputTuple,
    CanceledEvent.OutputObject
  >;
  getEvent(
    key: "Confirmed"
  ): TypedContractEvent<
    ConfirmedEvent.InputTuple,
    ConfirmedEvent.OutputTuple,
    ConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "Funded"
  ): TypedContractEvent<
    FundedEvent.InputTuple,
    FundedEvent.OutputTuple,
    FundedEvent.OutputObject
  >;
  getEvent(
    key: "GigCreated"
  ): TypedContractEvent<
    GigCreatedEvent.InputTuple,
    GigCreatedEvent.OutputTuple,
    GigCreatedEvent.OutputObject
  >;

  filters: {
    "Canceled(uint256,address)": TypedContractEvent<
      CanceledEvent.InputTuple,
      CanceledEvent.OutputTuple,
      CanceledEvent.OutputObject
    >;
    Canceled: TypedContractEvent<
      CanceledEvent.InputTuple,
      CanceledEvent.OutputTuple,
      CanceledEvent.OutputObject
    >;

    "Confirmed(uint256,address)": TypedContractEvent<
      ConfirmedEvent.InputTuple,
      ConfirmedEvent.OutputTuple,
      ConfirmedEvent.OutputObject
    >;
    Confirmed: TypedContractEvent<
      ConfirmedEvent.InputTuple,
      ConfirmedEvent.OutputTuple,
      ConfirmedEvent.OutputObject
    >;

    "Funded(uint256,address)": TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;
    Funded: TypedContractEvent<
      FundedEvent.InputTuple,
      FundedEvent.OutputTuple,
      FundedEvent.OutputObject
    >;

    "GigCreated(uint256,address,address,uint256)": TypedContractEvent<
      GigCreatedEvent.InputTuple,
      GigCreatedEvent.OutputTuple,
      GigCreatedEvent.OutputObject
    >;
    GigCreated: TypedContractEvent<
      GigCreatedEvent.InputTuple,
      GigCreatedEvent.OutputTuple,
      GigCreatedEvent.OutputObject
    >;
  };
}
