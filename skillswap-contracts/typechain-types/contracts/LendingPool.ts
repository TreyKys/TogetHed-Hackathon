/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "liquidateLoan"
      | "loanCounter"
      | "loans"
      | "repayLoan"
      | "requestLoan"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoan",
    data: BytesLike
  ): Result;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  liquidateLoan: TypedContractMethod<
    [loanId: BigNumberish],
    [void],
    "nonpayable"
  >;

  loanCounter: TypedContractMethod<[], [bigint], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        tokenId: bigint;
        amount: bigint;
        interest: bigint;
        duration: bigint;
        repaid: boolean;
      }
    ],
    "view"
  >;

  repayLoan: TypedContractMethod<[loanId: BigNumberish], [void], "payable">;

  requestLoan: TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount: BigNumberish,
      interest: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "liquidateLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "loanCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        borrower: string;
        tokenId: bigint;
        amount: bigint;
        interest: bigint;
        duration: bigint;
        repaid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[loanId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "requestLoan"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      amount: BigNumberish,
      interest: BigNumberish,
      duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
