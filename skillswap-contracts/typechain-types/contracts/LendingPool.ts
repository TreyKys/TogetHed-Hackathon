/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LendingPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assetTokenAddress"
      | "depositLiquidity"
      | "getLoan"
      | "liquidateLoan"
      | "liquidity"
      | "loans"
      | "owner"
      | "repayLoan"
      | "takeLoan"
      | "withdrawLiquidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LiquidityDeposited"
      | "LiquidityWithdrawn"
      | "LoanLiquidated"
      | "LoanRepaid"
      | "LoanTaken"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assetTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateLoan",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeLoan",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
}

export namespace LiquidityDepositedEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityWithdrawnEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanLiquidatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    liquidator: AddressLike,
    to: AddressLike
  ];
  export type OutputTuple = [tokenId: bigint, liquidator: string, to: string];
  export interface OutputObject {
    tokenId: bigint;
    liquidator: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    borrower: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, borrower: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    borrower: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanTakenEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    borrower: AddressLike,
    principal: BigNumberish,
    interest: BigNumberish,
    dueTime: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    borrower: string,
    principal: bigint,
    interest: bigint,
    dueTime: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    borrower: string;
    principal: bigint;
    interest: bigint;
    dueTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LendingPool extends BaseContract {
  connect(runner?: ContractRunner | null): LendingPool;
  waitForDeployment(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assetTokenAddress: TypedContractMethod<[], [string], "view">;

  depositLiquidity: TypedContractMethod<[], [void], "payable">;

  getLoan: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        borrower: string;
        principal: bigint;
        interest: bigint;
        dueTime: bigint;
        tid: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  liquidateLoan: TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  liquidity: TypedContractMethod<[], [bigint], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        borrower: string;
        principal: bigint;
        interest: bigint;
        dueTime: bigint;
        tokenId: bigint;
        state: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  repayLoan: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  takeLoan: TypedContractMethod<
    [
      tokenId: BigNumberish,
      principal: BigNumberish,
      interest: BigNumberish,
      durationSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawLiquidity: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assetTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositLiquidity"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getLoan"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        borrower: string;
        principal: bigint;
        interest: bigint;
        dueTime: bigint;
        tid: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidateLoan"
  ): TypedContractMethod<
    [tokenId: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        borrower: string;
        principal: bigint;
        interest: bigint;
        dueTime: bigint;
        tokenId: bigint;
        state: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "takeLoan"
  ): TypedContractMethod<
    [
      tokenId: BigNumberish,
      principal: BigNumberish,
      interest: BigNumberish,
      durationSeconds: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "LiquidityDeposited"
  ): TypedContractEvent<
    LiquidityDepositedEvent.InputTuple,
    LiquidityDepositedEvent.OutputTuple,
    LiquidityDepositedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityWithdrawn"
  ): TypedContractEvent<
    LiquidityWithdrawnEvent.InputTuple,
    LiquidityWithdrawnEvent.OutputTuple,
    LiquidityWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "LoanLiquidated"
  ): TypedContractEvent<
    LoanLiquidatedEvent.InputTuple,
    LoanLiquidatedEvent.OutputTuple,
    LoanLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;
  getEvent(
    key: "LoanTaken"
  ): TypedContractEvent<
    LoanTakenEvent.InputTuple,
    LoanTakenEvent.OutputTuple,
    LoanTakenEvent.OutputObject
  >;

  filters: {
    "LiquidityDeposited(address,uint256)": TypedContractEvent<
      LiquidityDepositedEvent.InputTuple,
      LiquidityDepositedEvent.OutputTuple,
      LiquidityDepositedEvent.OutputObject
    >;
    LiquidityDeposited: TypedContractEvent<
      LiquidityDepositedEvent.InputTuple,
      LiquidityDepositedEvent.OutputTuple,
      LiquidityDepositedEvent.OutputObject
    >;

    "LiquidityWithdrawn(address,uint256)": TypedContractEvent<
      LiquidityWithdrawnEvent.InputTuple,
      LiquidityWithdrawnEvent.OutputTuple,
      LiquidityWithdrawnEvent.OutputObject
    >;
    LiquidityWithdrawn: TypedContractEvent<
      LiquidityWithdrawnEvent.InputTuple,
      LiquidityWithdrawnEvent.OutputTuple,
      LiquidityWithdrawnEvent.OutputObject
    >;

    "LoanLiquidated(uint256,address,address)": TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;
    LoanLiquidated: TypedContractEvent<
      LoanLiquidatedEvent.InputTuple,
      LoanLiquidatedEvent.OutputTuple,
      LoanLiquidatedEvent.OutputObject
    >;

    "LoanRepaid(uint256,address,uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;

    "LoanTaken(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      LoanTakenEvent.InputTuple,
      LoanTakenEvent.OutputTuple,
      LoanTakenEvent.OutputObject
    >;
    LoanTaken: TypedContractEvent<
      LoanTakenEvent.InputTuple,
      LoanTakenEvent.OutputTuple,
      LoanTakenEvent.OutputObject
    >;
  };
}
